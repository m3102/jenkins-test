pipeline {
    agent any

    stages {
        stage('OWASP DependencyCheck') {    
            agent any
            steps {
                dependencyCheck additionalArguments: '--format HTML --format XML', odcInstallation: 'Default'
            }

            post {
                always {
                    dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                }
            }
        }

        stage('Prebuild') {
            agent any
            steps {
                // Install docker compose to Jenkins
                sh 'sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                sh 'sudo chmod +x /usr/local/bin/docker-compose'
                sh 'sudo docker-compose --version'

                // Removes existing docker container
                sh 'sudo docker-compose down'
                sh 'sudo docker ps -f name=client -q | xargs --no-run-if-empty docker container stop'
                sh 'sudo docker container ls -a -fname=client -q | xargs -r docker container rm'

                sh 'sudo docker ps -f name=jenkins -q | xargs --no-run-if-empty docker container stop'
                sh 'sudo docker container ls -a -fname=jenkins -q | xargs -r docker container rm'
            }
        }

        stage('Clone Git') {
            agent any
            steps {
                // Fetches github repository automatically and run docker
                git branch: 'main', url: 'https://github.com/helloitsm3/jenkins-test.git'
                sh "sudo docker-compose up -d --build"
            }
        }

        stage("Checkout") {
            steps {
                git branch: "master", url: "https://github.com/OWASP/Vulnerable-Web-Application.git"
            }
        }

        stage("Check Sonarqube Up") {
            steps {
                echo 'Waiting 2 minutes for deployment to complete prior starting smoke testing'
                sh 'sleep 180'
            }
        }

        stage("Code Quality Check via SonarQube") {
            steps {
                script {
                    def scannerHome = tool "SonarQube";
                    withSonarQubeEnv("SonarQube") {
                        sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=OWASP \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://192.168.1.93:9000 \
                            -Dsonar.login=e35b81efb30af19f928c473a2844304110c6918b"
                    }
                }
            }
        }

        stage('UI Test') {
            steps {
                sh 'sudo apt-get update && sudo apt-get -y install libpq-dev gcc'
                sh 'sudo apt-get install -y chromium libglib2.0-0 libnss3 libgconf-2-4 libfontconfig1'
                sh 'sudo apt-get install python3.8 && python -m pip install -r client/requirements.txt'
                sh 'cd client/tests && python ui.py'
            } 

            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/ui-test-reports/*.xml'
                }
            } 
        }

        stage('Unit / Integration Tests') {
            steps {
                sh 'apt-get update && apt-get -y install libpq-dev gcc'
                sh 'apt-get install -y chromium libglib2.0-0 libnss3 libgconf-2-4 libfontconfig1'
                sh 'sudo apt-get install python3.8 && python -m pip install -r client/requirements.txt'
                sh 'cd client/tests && python unit-integration.py'
            }

            post {
                always {
                    junit 'client/unit-integration-test-reports/*.xml'
                }
            } 
        }
    }
}